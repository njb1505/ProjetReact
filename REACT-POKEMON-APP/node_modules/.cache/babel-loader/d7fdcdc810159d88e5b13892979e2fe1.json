{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Videos\\\\PROGRAMMATION\\\\Programmation web\\\\JavaScript et ses frameworks\\\\React Js\\\\REACT-POKEMON-APP\\\\src\\\\components\\\\pokemon-card.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//on a typé notre pokemon\n\nconst PokemonCard = ({\n  pokemon\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Ce composant est charg\\xE9 d'afficher le pokemon : \", pokemon.name]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n/**\r\n 1. Ce composant(pokemon.card) est chargé d'afficher le pokemon.\r\n\r\n 2.Pour passer une props dans un composant: on le passe en parametre dans la f(x) qui represente notre composant voir la ligne avec la const PokemonCard:\r\n\r\n 3.Du coup la prop qu'on a passé est pokemon mais on ne sait si c'est un string, un nombre ou ... d'où la raison de typer notre prod (Voir le cours de type script sur la création des types)\r\n\r\n 4. On a typé notre f(x) avec le type Props (voir les generics en TypeScript);\r\n*/\n_c = PokemonCard;\nexport default PokemonCard;\nvar _c;\n$RefreshReg$(_c, \"PokemonCard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PokemonCard","pokemon","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Videos/PROGRAMMATION/Programmation web/JavaScript et ses frameworks/React Js/REACT-POKEMON-APP/src/components/pokemon-card.tsx"],"sourcesContent":["import React, {FunctionComponent} from 'react';\r\nimport Pokemon from '../models/pokemon'\r\n\r\ntype Props = {\r\n  pokemon:Pokemon\r\n}; //on a typé notre pokemon\r\n\r\nconst PokemonCard: FunctionComponent<Props> = ({pokemon}) =>{\r\n  return (\r\n    <div> \r\n      Ce composant est chargé d'afficher le pokemon : {pokemon.name} \r\n    </div>\r\n    );\r\n}\r\n/**\r\n 1. Ce composant(pokemon.card) est chargé d'afficher le pokemon.\r\n\r\n 2.Pour passer une props dans un composant: on le passe en parametre dans la f(x) qui represente notre composant voir la ligne avec la const PokemonCard:\r\n\r\n 3.Du coup la prop qu'on a passé est pokemon mais on ne sait si c'est un string, un nombre ou ... d'où la raison de typer notre prod (Voir le cours de type script sur la création des types)\r\n\r\n 4. On a typé notre f(x) avec le type Props (voir les generics en TypeScript);\r\n*/\r\nexport default PokemonCard;"],"mappings":";AAAA,OAAOA,KAAK,MAA2B,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAK5C;;AAEH,MAAMC,WAAqC,GAAGA,CAAC;EAACC;AAAO,CAAC,KAAI;EAC1D,oBACEF,OAAA;IAAAG,QAAA,GAAK,qDAC6C,EAACD,OAAO,CAACE,IAAI;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARAC,EAAA,GAPMR,WAAqC;AAgB3C,eAAeA,WAAW;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}