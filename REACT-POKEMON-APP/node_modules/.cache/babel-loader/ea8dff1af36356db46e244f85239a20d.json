{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Videos\\\\PROGRAMMATION\\\\Programmation web\\\\JavaScript et ses frameworks\\\\React Js\\\\REACT-POKEMON-APP\\\\src\\\\App.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/** \r\n Ici on importe React depuis le module react\r\n On importe aussi FunctionComponet depuis le module react.\r\n*/ //------------------------------------\nconst App = () => {\n  //  const name: String = 'React';\n  // const [pokemons, setpokemons]= useState<Pokemon[]>([]);\n\n  // useEffect(() => {\n  //   setpokemons(mock_pokemon);\n  // }, []);\n\n  return (\n    /*#__PURE__*/\n    // <PokemonList/>\n    _jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"nav\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nav-wrapper teal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 3\n    }, this)\n  );\n};\n\n/**\r\n 1.On a typé la constante App à React.FC\r\n\r\n\r\n 2. FunctionComponent: signifie un composant que l'on peut écrire sous forme d'une fonction.\r\n\r\n\r\n 3.useState('React'): prend une valeur initiale du composant qui peut etre un nombre , un objet, un boolean, un tableau, un string et dans notre cas c'est un string.\r\n\r\n 4. la fonction useState retourne une paire de deux elements const [name, setName].\r\n name: l'état actuel\r\n setName: une f(x) pour modifier la valeur de cet état.  \r\n\r\n 5.Pour le typage on utilise les generics de typescript\r\n\r\n\r\n 6.Le role finale de App.tsx est d'appeler le composant pokemon.list qui lui s'occupera d'afficher la liste des pokemons ainsi que gérer les routes.\r\n */\n//------------------------------------\n_c = App;\nexport default App; //Ici on exporte notre composant afin qu'il soit utilisable dans le reste de notre application.\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","App","Router","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Videos/PROGRAMMATION/Programmation web/JavaScript et ses frameworks/React Js/REACT-POKEMON-APP/src/App.tsx"],"sourcesContent":["import React, {FunctionComponent} from 'react';\r\nimport PokemonList from  './pages/pokemon-list';\r\n/** \r\n Ici on importe React depuis le module react\r\n On importe aussi FunctionComponet depuis le module react.\r\n*/\r\n//------------------------------------\r\n  \r\nconst App: FunctionComponent = () => {\r\n//  const name: String = 'React';\r\n// const [pokemons, setpokemons]= useState<Pokemon[]>([]);\r\n    \r\n// useEffect(() => {\r\n//   setpokemons(mock_pokemon);\r\n// }, []);\r\n\r\n return (\r\n  // <PokemonList/>\r\n  <Router>\r\n    <div>\r\n      {/*la barre de navigation commun à toutes les page */}\r\n        <nav>\r\n          <div className='nav-wrapper teal'>\r\n            \r\n          </div>\r\n        </nav>\r\n    </div>\r\n  </Router>\r\n )\r\n}\r\n\r\n/**\r\n 1.On a typé la constante App à React.FC\r\n\r\n\r\n 2. FunctionComponent: signifie un composant que l'on peut écrire sous forme d'une fonction.\r\n\r\n\r\n 3.useState('React'): prend une valeur initiale du composant qui peut etre un nombre , un objet, un boolean, un tableau, un string et dans notre cas c'est un string.\r\n\r\n 4. la fonction useState retourne une paire de deux elements const [name, setName].\r\n name: l'état actuel\r\n setName: une f(x) pour modifier la valeur de cet état.  \r\n\r\n 5.Pour le typage on utilise les generics de typescript\r\n\r\n\r\n 6.Le role finale de App.tsx est d'appeler le composant pokemon.list qui lui s'occupera d'afficher la liste des pokemons ainsi que gérer les routes.\r\n */\r\n//------------------------------------\r\nexport default App; //Ici on exporte notre composant afin qu'il soit utilisable dans le reste de notre application."],"mappings":";AAAA,OAAOA,KAAK,MAA2B,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C;AACA;AACA;AACA,EAHA,CAIA;AAEA,MAAMC,GAAsB,GAAGA,CAAA,KAAM;EACrC;EACA;;EAEA;EACA;EACA;;EAEC;IAAA;IACC;IACAD,OAAA,CAACE,MAAM;MAAAC,QAAA,eACLH,OAAA;QAAAG,QAAA,eAEIH,OAAA;UAAAG,QAAA,eACEH,OAAA;YAAKI,SAAS,EAAC;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAE5B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;AAEX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAC,EAAA,GAzCMR,GAAsB;AA0C5B,eAAeA,GAAG,CAAC,CAAC;AAAA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}